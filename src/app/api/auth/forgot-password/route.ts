import { NextRequest, NextResponse } from 'next/server';
import crypto from 'crypto';
import connectToDatabase from '@/lib/mongodb';
import User from '../../../models/User';
import Company from '../../../models/Company';

export async function POST(req: NextRequest) {
  try {
    const { email, role } = await req.json();

    if (!email || !role) {
      return NextResponse.json({ message: '–ò–º—ç–π–ª –±–æ–ª–æ–Ω —Ä–æ–ª—å –∑–∞–∞–≤–∞–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π' }, { status: 400 });
    }

    await connectToDatabase();

    // ‚úÖ Role —à–∞–ª–≥–∞–∂ —Ç—É—Å–¥–∞–∞ collection –∞—à–∏–≥–ª–∞—Ö
    let account;

    if (role === 'company') {
      account = await Company.findOne({ email });
    } else if (role === 'tourist') {
      account = await User.findOne({ email });
    } else {
      return NextResponse.json({ message: '–ë—É—Ä—É—É —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ç”©—Ä”©–ª' }, { status: 400 });
    }

    if (!account) {
      return NextResponse.json({ message: '–ò–º—ç–π–ª –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∏—à –±–∞–π–Ω–∞' }, { status: 404 });
    }

    // üîê Reset token “Ø“Ø—Å–≥—ç—Ö
    const resetToken = crypto.randomBytes(32).toString('hex');
    const tokenExpiry = Date.now() + 1000 * 60 * 30; // 30 –º–∏–Ω—É—Ç

    account.resetToken = resetToken;
    account.resetTokenExpiry = tokenExpiry;
    await account.save();

    // ‚úÖ Reset –ª–∏–Ω–∫–∏–π–≥ –∏–º—ç–π–ª—ç—ç—Ä –∏–ª–≥—ç—ç—Ö –æ—Ä–æ–Ω–¥ log —Ö–∏–π–∂ –±–∞–π–Ω–∞
    console.log(`Reset –ª–∏–Ω–∫: http://localhost:3000/reset-password/${resetToken}`);

    return NextResponse.json({ message: '–°—ç—Ä–≥—ç—ç—Ö —Ö–æ–ª–±–æ–æ—Å –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç' }, { status: 200 });

  } catch (error) {
    console.error('Forgot-password –∞–ª–¥–∞–∞:', error);
    return NextResponse.json({ message: '–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞' }, { status: 500 });
  }
}
